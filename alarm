#!/usr/bin/env python3
import os
import sys
import getopt
import RPi.GPIO as GPIO
from time import sleep

VERSION = "0.3"
PROGRAM = os.path.basename(__file__)
USAGE = f"""\
{PROGRAM} version {VERSION}.
Sound an alarm (active buzzer) via GPIO pin.
Syntax: {VERSION} [OPTION] [on|off]
OPTION:
-h      Display this help and exit.
-i sec  Set interval in seconds between alarms (float, default 0.5).
-n num  Repeat alarm "num" times (default 1).
-p num  Set the GPIO physical pin number (default 29).
-t sec  Set the alarm duration in second (float, default indefinitely).
on      Turn the alarm on.
off     Turn the alarm off.

For circuit design, see https://github.com/tariusagi/ulcd.
"""

def main():
	# Parameters.
	pin = 29
	action = None
	repeats = 1
	interval = 0.5
	duration = None
	# Process command line arguments.
	if len(sys.argv) == 1:
		print(USAGE)
		sys.exit(0)
	# Handle commandline arguments.
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'hi:n:p:t:')
	except getopt.error as err:
		print(f'ERROR: {str(err)}. Use "-h" for usage.', file = sys.stderr)
		sys.exit(1)
	for o, v in opts:
		if o == '-h':
			print(USAGE)
			sys.exit(0)
		elif o == '-i':
			interval = float(v)
		elif o == '-n':
			repeats = int(v)
		elif o == '-p':
			pin = int(v)
		elif o == '-t':
			duration = float(v)
		else:
			print('ERROR: Unrecognized option. Use "-h" for usage.', file = sys.stderr)
			sys.exit(2)
	if len(args) == 0:
			print('ERROR: No action provided. Use "-h" for usage.', file = sys.stderr)
			sys.exit(3)
	else:
		GPIO.setwarnings(False)
		GPIO.setmode(GPIO.BOARD)
		print(f"Use physical pin {pin}")
		GPIO.setup(pin, GPIO.OUT)
		action = args[0]
		if action == "on":
			if duration is None:
				print(f"Alarm on")
				GPIO.output(pin, 1)
			else:
				while repeats:
					# Turn the alarm on.
					print("Alarm on")
					GPIO.output(pin, 1)
					print(f"Wait {duration}s")
					sleep(duration)
					print("Alarm off")
					GPIO.output(pin, 0)
					if repeats > 1:
						sleep(interval)
					repeats -= 1
		elif action == "off":
			print("Alarm off")
			GPIO.output(pin, 0)
 
if __name__ == '__main__':
	main()
